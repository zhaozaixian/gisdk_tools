//************************************************************************************
Macro "GIS"
    
    file=OpenFile("c:\\shapes.GIS","w+")
    gNodeLayer="Node"
    gLinkLayer="Link"
    SetMapUnits("Meters")
    
    WriteLine(file,"*                   File generated by TransCAD  "+GetDateAndTime())
    WriteLine(file,"*――――――――――――――――――――――――――――――――――――――――")
    WriteLine(file,"Title: THIS IS SHAPE GIS FILE FOR SATURN")
    
   
    RUNMacro("LinkNames" ,gNodeLayer,gLinkLayer,file)
    RUNMacro("LinkShapes",gNodeLayer,gLinkLayer,file)
    
EndMacro


Macro "LinkNames" (gNodeLayer,gLinkLayer,file)   
    
    WriteLine(file,"* THE FOLLOWING  IS FOR LINK NAMES LABEL")
    WriteLine(file,"66666")

    SetLayer(gLinkLayer)
    
    EnableProgressBar("Export LinkNames", 1)	//设置进度条
    CreateProgressBar("Export LinkNames...","True")
    Step=0
    Count=GetRecordCount(gLinkLayer,)
    StepII=0
    
    DIM linknodes[2]
    lrh=GetFirstRecord(gLinkLayer+"|",)
    While lrh<>null do
    
      StepII=StepII+1
      temp=RealToInt(StepII*100/Count)	//计算进度
      If temp>Step then do
        Step=temp
        stat=UpdateProgressBar("Export Links..." + String(Step),Step)
        If stat="True" Then Do
          DestroyProgressBar()
          GoTo Quit_Loop
        End
      End


      lVal=GetRecordValues(gLinkLayer, ,{"Road_Name","Dir"})
      if (lVal[1][2]=NULL) Then GoTo CONTINUE
      
      nids=GetEndpoints(RH2ID(lrh))
      For i=1 To 2 Do
        nval=GetRecordValues(gNodeLayer,ID2RH(nids[i]),{"CentroidNode"})
        IF(nval[1][2]<>null) THEN   	linknodes[i]=RunMacro("Format", nval[1][2],10)
                                   ELSE	    linknodes[i]=RunMacro("Format", nids[i],   10)
      End

      If lVal[2][2]>=0 then    WriteLine(file, LPAD(lVal[1][2],12)+linknodes[1]+linknodes[2])
      If lVal[2][2]<=0 then    WriteLine(file, LPAD(lVal[1][2],12)+linknodes[2]+linknodes[1])
        
      CONTINUE:
      lrh=GetNextRecord(gLinkLayer+"|", ,)
    END
      
Quit_Loop:
    DestroyProgressBar()
    WriteLine(file,"99999")
    
EndMacro   


Macro "LinkShapes" (gNodeLayer,gLinkLayer,file)   
    
 
    WriteLine(file,"\n* THE FOLLOWING  IS FOR LINK SHAPES")
    WriteLine(file,"77777")
    

    Xmin=99999999
    Ymin=99999999

    SetLayer(gNodeLayer)
    
    nrh=GetFirstRecord(gNodeLayer+"|",)
    While nrh<>null Do 
      
      npt=RunMacro("BLToXY",GetPoint(RH2ID(nrh)))
      
      if(npt[1]<Xmin)  then  Xmin=npt[1]
      if(npt[2]<Ymin)  then  Ymin=npt[2]

      nrh=GetNextRecord(gNodeLayer+"|", , )
    End


    SetLayer(gLinkLayer)
    
    EnableProgressBar("Export LinkShapes", 1)	//设置进度条
    CreateProgressBar("Export LinkShapes...","True")
    Step=0
    Count=GetRecordCount(gLinkLayer,)
    StepII=0
    

    dim linknodes[2]
    lrh=GetFirstRecord(gLinkLayer+"|",)
    While lrh<>null do
    
      StepII=StepII+1
      temp=RealToInt(StepII*100/Count)	//计算进度
      If temp>Step then do
        Step=temp
        stat=UpdateProgressBar("Export Links..." + String(Step),Step)
        If stat="True" Then Do
          DestroyProgressBar()
          GoTo Quit_Loop
        End
      End


      pts=GetLine(RH2ID(lrh))
      if (pts.Length=2) Then GoTo CONTINUE
      
      nids=GetEndpoints(RH2ID(lrh))
      For i=1 To 2 Do
        nval=GetRecordValues(gNodeLayer,ID2RH(nids[i]),{"CentroidNode"})
        IF(nval[1][2]<>null) THEN   	linknodes[i]=RunMacro("Format", nval[1][2],10)
                             ELSE	    linknodes[i]=RunMacro("Format", nids[i],   10)
      End

      lVal=GetRecordValues(gLinkLayer, ,{"Dir"})
      If lVal[1][2]>=0 then do
         WriteLine(file,linknodes[1]+linknodes[2])
         For i=1 To pts.Length Do
          pt=RunMacro("BLToXY",pts[i])
          x=pt[1]-Xmin
          y=pt[2]-Ymin
          wline=wline+LPAD(Format(x,"*.00"),10)+LPAD(Format(y,"*.00"),10)
          If (mod(i,4)=0 and i<>pts.Length)  Then  wline=wline+'\n'
         END
         WriteLine(file,wline)
         wline=null
      End 
        
      If lVal[1][2]<0 then do
         WriteLine(file,linknodes[2]+linknodes[1])
         For i= pts.Length  To  1 step -1 Do
          pt=RunMacro("BLToXY",pts[i])
          x=pt[1]-Xmin
          y=pt[2]-Ymin
          wline=wline+LPAD(Format(x,"*.00"),10)+LPAD(Format(y,"*.00"),10)
          If (mod((pts.length-i+1),4)=0 and i<>1)  Then  wline=wline+'\n'
         END
         WriteLine(file,wline)
         wline=null
      End
        
      CONTINUE:
      lrh=GetNextRecord(gLinkLayer+"|", ,)
    END
      
Quit_Loop:
    DestroyProgressBar()
    WriteLine(file,"99999")
    
EndMacro    
    
    

//********************************************************************************************
//********************************************************************************************
Macro "Format"(val, dec)
    str=String(val)
    If StringLength(str)<=dec Then Return(LPad(str, dec))
    Else Do
      dot=Position(str,".")
      If dot=0 Or dot-1>dec Then Return(LPad("#", dec))
      Else Return(Left(str, dec))
    End
EndMacro



//经纬度坐标换算成深圳本地坐标
Macro "BLToXY"(coor)
  B=coor.lat/1000000.0
  L=coor.lon/1000000.0

//WGS84经纬度坐标到北京54坐标
  PAI=3.1415926535898
  a=6378245.0
  e2=0.00669342162297
  e12=0.00673852541468
  p2=3600.0*180.0/PAI
  P0=PAI/180.0
  
  C0=6367558.49686
  C1=32005.79642
  C2=133.86115
  C3=0.7031
  
  l=(L-114)*3600
  t=tan(B*P0)
  t2=t*t
  t4=t2*t2
  Ita2=e12*cos(B*P0)*cos(B*P0)
  Ita4=Ita2*Ita2
  N=a/sqrt(1-e2*sin(B*P0)*sin(B*P0))
  m=l*cos(B*P0)/p2
  
  m2=m*m
  m4=m2*m2
  SinBf=sin(B*P0)
  SinBf2=SinBf*SinBf
  SinBf4=SinBf2*SinBf2
  
  Temp1=C0*B*P0
  Temp2=cos(B*P0)*SinBf*(C1+C2*SinBf2+C3*SinBf4)
  Temp3=1.0/2.0*N*t*m2
  Temp4=1/24.0*(5.0-t2+9*Ita2+4*Ita4)*N*t*m4
  Temp5=1/720*(61-58*t2+t4)*N*t*(m2*m4)
  
  Temp6=N*m
  Temp7=1/6.0*(1-t2+Ita2)*N*(m*m2)
  Temp8=1/120.0*(5-18*t2+(t2*t2)+14*Ita2*Ita2-58*Ita2*t2)*N*(m*m4)
  X=Temp1-Temp2+Temp3+Temp4+Temp5
  Y=500000+Temp6+Temp7+Temp8
    
//从北京54坐标到本地坐标
  PAI=3.1415926535898
  angle=1.00860457
  s=0.997874528635
  dx=-2460040.63895730
  dy=-433223.52500793
  
  angle=angle/180.0*PAI
  
  lx=X*cos(angle)-Y*sin(angle)
  ly=X*sin(angle)+Y*cos(angle)
  
  lx=lx*s
  ly=ly*s
  
  lx=lx+dx
  ly=ly+dy
  
//  lx=Round((lx+3000000)/10000,0)
//  ly=Round((ly+30000000)/10000,0)
//  lx=Round(lx/300,0)
//  ly=Round(ly/200,0)
lx=round(lx,2)
ly=round(ly,2)
  
  return({ly,lx})
  
endMacro